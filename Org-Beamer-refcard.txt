#+TITLE:     Org Beamer quick reference card
#+AUTHOR:    Fabrice Niessen
#+EMAIL:     (concat "fniessen" at-sign "pirilampo.org")
#+Time-stamp: <2014-06-14 Sat 22:45>
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:nil ^:{}

#+PROPERTY:  eval no
# #+SETUPFILE: ~/src/org-style/setup/bigblow-local-abs.setup
#+SETUPFILE: ~/src/org-style/setup/leuven-local-abs.setup

#+LaTeX_CLASS_OPTIONS: [presentation, t]
#+COLUMNS: %45ITEM %10BEAMER_env(Env) %10BEAMER_act(Act) %4BEAMER_col(Col) %8BEAMER_opt(Opt)
#+PROPERTY: BEAMER_col_ALL 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 0.0 :ETC

#+BEAMER_THEME: Boadilla
# #+BEAMER_THEME: AnnArbor

# include navigation bars
# #+BEAMER_THEME: Antibes

# include a table of contents sidebar
# #+BEAMER_THEME: Hannover

# include a "Mini Frame Navigation"
# #+BEAMER_THEME: Singapore

# have the section and subsection titles at the top of each frame
# #+BEAMER_THEME: Warsaw

#+BEAMER_COLOR_THEME: crane

#+BEAMER_HEADER: \usepackage{lxfonts}
#+BEAMER_HEADER: \usefonttheme{professionalfonts}

#+INCLUDE: "~/src/stage-latex-dunkerque-2013/style/listings.org"

#+LATEX_HEADER: \lstdefinelanguage{R}{}

#+LATEX_HEADER: \definecolor{mylinkcolor}{HTML}{006DAF}
#+LATEX_HEADER: \hypersetup{colorlinks=true, linkcolor=mylinkcolor, urlcolor=mylinkcolor}

#+LATEX_HEADER: \usepackage{tikz}
# For every picture that defines or uses external nodes, you'll have to
# apply the 'remember picture' style. To avoid some typing, we'll apply
# the style to all pictures.
#+LaTeX: \tikzstyle{every picture}+=[remember picture]

* Tasks                                                              :noexport:

** TODO Beamerarticle

** TODO Citations

** TODO Improve handouts

Add:
- additional text (speaker notes) for visual slides,
- more information and
- references.

http://www.speakingaboutpresenting.com/delivery/presentation-handouts/

** TODO Add subjects

See http://office.microsoft.com/en-us/powerpoint-help/training-courses-for-powerpoint-2013-HA104015465.aspx

* Overview

** Description

Welcome to *Org Beamer reference card*.  It contains the reference documentation
that describes how to *write presentations* based on:

- [[http://orgmode.org/][Org mode]] 8 and
- the [[https://bitbucket.org/rivanvx/beamer/][LaTeX Beamer class]].

Those *free* tools allow you to easily produce *high quality* *PDF files* which are
going to be displayed on /every/ computer exactly the way they looked on /your/
computer.

** Features

Since they are *like any other Org mode document*, authoring presentations with
Org Beamer is very easy, thanks to its *straightforward* syntax.

The obvious advantages of this approach are that:

- *you don't have to know LaTeX* in order to *create Beamer presentations*.

- *you are more productive* when editing presentations:
  + you can expand and collapse slides,
  + you can switch quickly between slides by using navigation (speed) commands,
  + you can incorporate code blocks (in R or in many other languages) for
    illustration, and evaluate them to actually render output (including
    plots).

** Requirements
   :PROPERTIES:
   :ID:       c4f6745b-2147-4538-bd96-9f8e1e1d4669
   :END:

- A working LaTeX installation is required for exporting to PDF.  If it is not
  yet installed on your system, install [[http://www.tug.org/texlive/][TeX Live]] (for example).

- You must define a ~beamer~ class in ~org-latex-export-classes~:

  #+begin_src emacs-lisp
  (eval-after-load "ox-latex"

    ;; update the list of LaTeX classes and associated header (encoding, etc.)
    ;; and structure
    '(add-to-list 'org-latex-classes
                  `("beamer"
                    ,(concat "\\documentclass[presentation]{beamer}\n"
                             "[DEFAULT-PACKAGES]"
                             "[PACKAGES]"
                             "[EXTRA]\n")
                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
  #+end_src

* Authoring presentations

** Creating a title page
   :PROPERTIES:
   :BEAMER_opt: allowframebreaks,label=
   :END:

The very first slide (called *frame* in a Beamer presentation) is the *title page*.
By default, it will automatically be displayed with the following elements:

- the document *title*

  #+begin_src org
  ,#+TITLE: Document title
  #+end_src

  (file name, if none specified)

- the *author(s)*'s name

  #+begin_src org
  ,#+AUTHOR: John Doe
  #+end_src

  (Emacs Lisp variable ~user-full-name~, if none specified)

- a *date*

  #+begin_src org
  ,#+DATE: 2014-06-11
  #+end_src

  (LaTeX macro ~\today~, if none specified)

#+ATTR_BEAMER: \framebreak
#+ATTR_LaTeX: \framebreak
\framebreak

The author's email can be included with:

#+begin_src org
,#+AUTHOR:    \href{mailto:email@example.com}{John Doe}
,#+AUTHOR:    \texorpdfstring{John Doe\newline\url{email@example.com}}{John Doe} % DOES NOT WORK XXX -> BEAMER_HEADER???
,#+BEAMER_HEADER: \author{\texorpdfstring{John Doe\newline\url{email@example.com}}{John Doe}} % BAD ORDER XXX
#+end_src

Other elements:
- the document *subtitle*,
- their affiliation (*institute*), and
- a *title graphic*
can be included with the following commands:

#+BEGIN_SRC org :eval no
,#+BEAMER_HEADER: \subtitle{Document subtitle}
,#+BEAMER_HEADER: \institute[INST]{Institute\\\url{http://www.institute.edu}}
,#+BEAMER_HEADER: \titlegraphic{\includegraphics[height=1.5cm]{InstLogo}}
#+END_SRC

XXX Why do I have to use :eval no (in Org blocks)?

The [[id:f6d1f139-2460-4844-93f1-c71277c810e0][inner theme]] dictates how the title page is rendered.

#+BEGIN_SRC org :eval no
,#+BEAMER_HEADER: \logo{\includegraphics[height=.9cm]{InstLogo}}
#+END_SRC

** Structure basics

Org mode presentations contain headings at different levels.

By default,

- Headings at the *first* outline level will become *titles* of the different
  frames.

- *Deeper* levels will be used as *structural environments*.

- The *table of contents* frame is created but is blank
  ([[id:b4252974-1d3d-4652-b42e-e7cd016f45f7][you'll understand later]]).

  You can remove it by setting the ~toc~ option (default: ~t~) from the ~#+OPTIONS:~
  keyword to ~nil~:

#+begin_src org
,#+OPTIONS: toc:nil

,* Frame 1

Some content.

,** Block

This is a block.
#+end_src

** Creating a simple frame

To create a frame with bullets, you simply use standard Org mode bullets:

#+begin_src org
,* A title
  #+Beamer: \framesubtitle{A subtitle}

- Bullet 1
- Bullet 2
- Bullet 3
#+end_src

Content within frames is formatted using standard Org mode syntax.

The optional *subtitle* does not have an Org syntax because it's specific to the
Beamer back-end only.

** Frame with code

Here is a simple R code block...

#+begin_src org
,#+begin_src R :exports both
summary(cars)
,#+end_src
#+end_src

... that will display the code and show its output in the frame:

#+begin_src R :eval yes :exports both
summary(cars)
#+end_src

#+results:
| Min.   : 4.0 | Min.   :  2.00 |
| 1st Qu.:12.0 | 1st Qu.: 26.00 |
| Median :15.0 | Median : 36.00 |
| Mean   :15.4 | Mean   : 42.98 |
| 3rd Qu.:19.0 | 3rd Qu.: 56.00 |
| Max.   :25.0 | Max.   :120.00 |

XXX Is this needed?

#+BEGIN_SRC org
,#+LATEX_HEADER: \lstdefinelanguage{R}{}
#+END_SRC

** Frame with code only

To display a code block without evaluating it, you specify the ~:eval no~ option:

#+begin_src org
,#+begin_src R :eval no
summary(cars)
,#+end_src
#+end_src

It only renders the code:

#+begin_src R :eval no
summary(cars)
#+end_src

** Frame with output only

To display the output of a code block without echoing the underlying code, you
specify the ~:exports results~ option:

#+begin_src org
,#+begin_src R :exports results
summary(cars)
,#+end_src
#+end_src

It only renders the results:

#+begin_src R :eval yes :exports results
summary(cars)
#+end_src

#+results:
| Min.   : 4.0 | Min.   :  2.00 |
| 1st Qu.:12.0 | 1st Qu.: 26.00 |
| Median :15.0 | Median : 36.00 |
| Mean   :15.4 | Mean   : 42.98 |
| 3rd Qu.:19.0 | 3rd Qu.: 56.00 |
| Max.   :25.0 | Max.   :120.00 |

** Frame with plot

Code blocks can also be used to include plots within presentations.

To display a plot while omitting the code used to generate it, you can include
a code block like this:

#+begin_src org
,#+begin_src R :exports results :results graphics :file qplot.png
plot(cars)
,#+end_src
#+end_src

#+begin_src R :eval yes :exports results :results graphics :file qplot.png
#+begin_src R :eval yes :exports results :results graphics :file qplot.png
#+begin_src R :eval yes :exports results :results graphics :file qplot.png
## library(ggplot2)
## qplot(speed, dist, data=cars) + geom_smooth()
plot(cars)
#+end_src

#+ATTR_LaTeX: :height 4.5cm
#+results:
[[file:qplot.png]]

** Creating a table of contents
   :PROPERTIES:
   :ID:       b4252974-1d3d-4652-b42e-e7cd016f45f7
   :BEAMER_opt: allowframebreaks,label=
   :END:

If you set the ~H~ option from the ~#+OPTIONS:~ keyword (or the
~org-beamer-frame-level~ variable) to ~2~:

#+begin_src org
,#+OPTIONS: H:2 toc:t
#+end_src

then:

- *First-level* headings become *sections* listed in the table of contents[fn::
  The items in the TOC are clickable and take you to specific frames in the
  presentation.], and

- *Second-level* headings become the *frames*.

XXX Misplaced footnote!

#+Beamer: \framebreak

If you set the ~H~ value to ~3~ in the ~OPTIONS~ line:

#+begin_src org
,#+OPTIONS: H:3 toc:t
#+end_src

then:

+ *First-* and *second-level* headings become *sections* and *subsections* listed in
  the table of contents, and

+ *Third-level* headings become the *frames*.

In many themes, sections (and subsections, when ~H:3~) appear in the sidebar or
heading.

** Present a bibliography

* Editing presentations

** Exporting to PDF

Type:

#+begin_src emacs-lisp
M-x load-library RET ox-beamer RET
#+end_src

to load the Beamer back-end library, and to obtain *extra commands* in the LaTeX
export menu:

- ~C-c C-e l B~ ::
     Export as LaTeX buffer (Beamer).

- ~C-c C-e l b~ ::
     Export as LaTeX file (Beamer).

- ~C-c C-e l P~ ::
     *Export as PDF file* (Beamer).

- ~C-c C-e l O~ ::
     Export as PDF file and *open* (Beamer).

** Support editing

Type:

#+begin_src emacs-lisp
M-x org-beamer-mode RET
#+end_src

to load the minor mode ~org-beamer-mode~ *easing the edition* of the *document
structure* (through the key binding ~C-c C-b~, which offers fast selection of
a [[id:77f1b7a3-6e7d-4f2b-bd1f-02e6f02bba2f][Beamer environment]]).

You can also turn it on with:

#+begin_src org
,#+STARTUP: beamer
#+end_src

in your document.

* Distributing presentations

** Create a handout

You can distribute your presentation in the form of handouts.

Presentations exported in this manner are entirely animation-free: overlays are
removed and just the last "slide" of each frame is printed.

#+begin_src org
,#+LATEX_CLASS_OPTIONS: [handout]

,#+LATEX_HEADER: \usepackage{pgfpages}
,#+LATEX_HEADER: \mode<handout>
,#+LATEX_HEADER: {
,#+LATEX_HEADER:   ... see below ...
,#+LATEX_HEADER: }
#+end_src

- with *one frame* per A4 page (extending page size)

  #+begin_src org
  ,#+LATEX_HEADER:   \pgfpagesuselayout{resize to}[a4paper,landscape]
  #+end_src

- with *two frames* per A4 page

  #+begin_src org
  ,#+LATEX_HEADER:   \pgfpagesuselayout{2 on 1}[a4paper,border shrink=5mm]
  #+end_src

- with *four frames* per A4 page

  #+begin_src org
  ,#+LATEX_HEADER:   \pgfpagesuselayout{4 on 1}[a4paper,border shrink=5mm,%
  ,#+LATEX_HEADER:                              landscape]
  #+end_src

** Draw a border around the frames

Add a rectangle around each frame in the handout:

#+begin_src org
,#+LATEX_HEADER: \setbeamertemplate{background canvas}{
,#+LATEX_HEADER:   \tikz \draw (current page.north west) rectangle
,#+LATEX_HEADER:               (current page.south east);
,#+LATEX_HEADER: }
#+end_src

** Show speaker notes

Show reminders about what to say during each part of your presentation.

Your laptop monitor and your projector should have the same resolution.

http://freakazoid.teamblind.de/2011/03/30/latex-presentations-with-notes-on-windows-7/

** Print handout with speaker notes

See http://tex.stackexchange.com/questions/38084/displaying-slides-with-beamer-and-article-class/38146#38146

See Guido Diepen's [[http://www.guidodiepen.nl/2009/07/creating-latex-beamer-handouts-with-notes/][handoutWithNotes.sty]] for PowerPoint like handout.

#+BEGIN_SRC org :eval no
,#+LATEX_HEADER: \usepackage{handoutWithNotes}
,#+LATEX_HEADER: \pgfpagesuselayout{3 on 1 with notes}[a4paper,border shrink=5mm]
#+END_SRC

** Print as article

Using beamerarticle

* Customizing presentations

** LaTeX class (XXX not necessary, does work???)

#+begin_src org
,#+LATEX_CLASS_OPTIONS:
#+end_src

Common options:

- 8pt, 9pt, 10pt, *11pt*, 12pt, 14pt, 17pt, 20pt
- draft: no graphics, footlines,...
- handout: no overlays

,#+LaTeX_CLASS_options: [bigger,allowframebreaks]

** LaTeX preamble

Append any line of code in the *LaTeX preamble* with keywords specific to the
LaTeX and Beamer back-ends:

#+begin_src org
,#+LATEX_HEADER:       \usepackage{...}
,#+LATEX_HEADER_EXTRA: \usepackage{...}
,#+BEAMER_HEADER:      \institute[short name]{Institute}
#+end_src

It will go (in that order) in the ~[EXTRA]~ placeholder of the header associated
to the ~beamer~ LaTeX class (see [[id:c4f6745b-2147-4538-bd96-9f8e1e1d4669][~org-latex-classes~]]).

** Inline LaTeX
   :PROPERTIES:
   :BEAMER_opt: allowframebreaks,label=
   :END:

You can include raw LaTeX in your Org presentations and it will get kept as
LaTeX when it's exported.

*** Left                                                                :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.43
    :END:

#+begin_src org
,#+begin_LaTeX
\begin{minipage}{4cm}
...
\end{minipage}
,#+end_LaTeX
#+end_src

#+begin_src org
,#+LaTeX: \parbox{4cm}{...}
#+end_src

Such LaTeX code will only be present in the exports to *LaTeX and Beamer*.

*** Right                                                               :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.43
    :END:

#+begin_src org
,#+begin_Beamer
\begin{minipage}{4cm}
...
\end{minipage}
,#+end_Beamer
#+end_src

#+begin_src org
,#+Beamer: \parbox{4cm}{...}
#+end_src

Such LaTeX code will only be present in the export to *Beamer*.

*** Back to one column                                        :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:

#+Beamer: \framebreak

It is especially useful for more *advanced stuff* like images or tables where you
need more control of the LaTeX options than Org mode actually gives you.

For example, to insert a table with colspan or rowspan support:

#+begin_src org
,#+begin_LaTeX
\begin{tabular}{|l|l|l|}
  \hline
  Text1 & Text2 & Text3 \\
  \hline
  \multicolumn{3}{|c|}{Merged text here} \\
  \hline
\end{tabular}
,#+end_LaTeX
#+end_src

#+begin_center
#+begin_LaTeX
\begin{tabular}{|l|l|l|}
  \hline
  Text1 & Text2 & Text3 \\
  \hline
  \multicolumn{3}{|c|}{Merged text here} \\
  \hline
\end{tabular}
#+end_LaTeX
#+end_center

** Affiliated keywords

The Beamer back-end reads both

- ~#+ATTR_LATEX:~ and
- ~#+ATTR_BEAMER:~

*affiliated* keywords.

XXX Code with figure or table

** Using a custom theme
   :PROPERTIES:
   :ID:       f6d1f139-2460-4844-93f1-c71277c810e0
   :END:

You can specify a Beamer theme using the ~#+BEAMER_THEME~ keyword.

For example:

#+begin_src org :eval no
,#+BEAMER_THEME: Boadilla
#+end_src

which is equivalent (for Boadilla) to:

#+begin_src org :eval no
,#+BEAMER_COLOR_THEME: dolphin
,#+BEAMER_FONT_THEME:  default
,#+BEAMER_INNER_THEME: [shadow]rounded
,#+BEAMER_OUTER_THEME: infolines
#+end_src

** Changing the frame font

Fonts must be present on the system you're presenting on or it will go back to
a fallback font.

Font Risque.

#+BEGIN_SRC org
,#+LATEX_HEADER: \usepackage[frenchstyle]{kpfonts}
#+END_SRC

** Adding an image on the title slide

Insert an image in the title slide that fills the whole width of the slide but
limits to half height.

#+BEGIN_SRC org :eval no
,#+BEAMER_HEADER: \titlegraphic{\includegraphics[width=\textwidth,height=.5\textheight]{someimage}}
#+END_SRC

#+BEAMER_HEADER: \titlegraphic{\includegraphics[width=\textwidth,height=.5\textheight]{images/someimage}}

* Column view

** Column view

For a column view of options and configurations for the individual frames

#+begin_src org
,#+COLUMNS: %45ITEM %10BEAMER_env(Env) %10BEAMER_act(Act) %4BEAMER_col(Col) %8BEAMER_opt(Opt)
,#+COLUMNS: %20ITEM %13BEAMER_env(Env) %6BEAMER_envargs(Args) %4BEAMER_col(Col) %7BEAMER_extra(Extra)
#+end_src

* Environments

** Environment specification: BEAMER_env

XXX Put = around BEAMER_env in title...

- This becomes visible through the =B_frame= tag (visual aid only).

** Frames

*** frame                                                             :B_frame:
    :PROPERTIES:
    :BEAMER_env: frame
    :END:

If a heading in the current tree has a ~BEAMER_env~ property set to either ~frame~
or ~fullframe~, its level overrides the ~H~ value, giving you some flexibility in
deciding *what is* and what isn't *a frame*.

#+begin_src org
,#+OPTIONS: H:2 toc:t

,* Section 1

,** Frame

,* Section 2

,** Subsection 2.1

,*** Frame                                                           :B_frame:
    :PROPERTIES:
    :BEAMER_env: frame
    :END:

This becomes a frame, instead of a block!
#+end_src

This works in both "directions": to *add or* to *remove sectioning levels* above
the current heading (which becomes a frame)!

*** fullframe                                                     :B_fullframe:
    :PROPERTIES:
    :BEAMER_env: fullframe
    :END:

- A frame automatically display its title unless it is specified as
  a ~fullframe~.

- ~fullframe~ is the same as the ~frame~ specification, but with an ignored title
  (~frametitle~ is set to the empty string).

** Blocks
   :PROPERTIES:
   :ID:       77f1b7a3-6e7d-4f2b-bd1f-02e6f02bba2f
   :END:

*** Environment specification (BEAMER_env property)

XXX Use ~ or = in title

Use a different *block type for the current "block" environment* (default:
~block~).

*** ~structureenv~ environment

- For highlighting text.
- To help the audience see the structure of your presentation.

**** structureenv                                              :B_structureenv:
     :PROPERTIES:
     :BEAMER_env: structureenv
     :END:

Paragraph Heading.

**** End of structureenv                                      :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

*** ~block~ environment

**** Answered Questions                                               :B_block:
     :PROPERTIES:
     :BEAMER_env: block
     :END:

How many primes are there?

**** Open Questions                                                   :B_block:
     :PROPERTIES:
     :BEAMER_env: block
     :END:

Is every even number the sum of two primes?

**** End of block                                             :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

*** ~block~ environment = the default? Yes, but white lines NOT suppressed!

**** Answered Questions

How many primes are there?

**** Open Questions

Is every even number the sum of two primes?

*** ~alertblock~ environment                                     :B_alertblock:
    :PROPERTIES:
    :BEAMER_env: alertblock
    :END:

- Inserts a block whose title is highlighted.
- Behaves like the ~block~ environment otherwise.

**** Wrong theorem

/1=2/.

**** End of alertblock                                        :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

*** ~exampleblock~ environment

- Inserts a block that is supposed to be an example.
- Behaves like the ~block~ environment otherwise.

**** Example                                                   :B_exampleblock:
     :PROPERTIES:
     :BEAMER_env: exampleblock
     :END:

The set /{1,2,3,5}/ has four elements.

**** End of exampleblock                                      :B_ignoreheading:
      :PROPERTIES:
      :BEAMER_env: ignoreheading
      :END:

*** ~theorem~ environment

- Inserts a theorem.

**** This title won't be displayed                                  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:

There is no largest prime number.

Org mode + Beamer = productivity^{2}

#+LaTeX: \hfill \(\qed\)

**** End of theorem                                           :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

If there is nothing after the block, no need to insert a heading for
demarcating the end.

*** ~theorem~ environment

- Inserts a theorem.
- Simpler solution
  + More readable
  + Less powerful: you can't nest blocks of the same type with this syntax

#+attr_latex: :options {Theorem}
#+begin_block
There is no largest prime number.
#+end_block

*** ~corollary~ environment

*** ~lemma~ environment

*** ~definition~ environment

- Behaves like the ~theorem~ environment, except that the theorem style
  ~definition~ is used.
- In this style, the body of a ~theorem~ is typeset in an upright font.

**** definition                                                  :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:

Contents of definition

**** End of definition                                        :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

*** ~definitions~ environment

*** ~fact~ environment

*** ~example~ environment

- Behaves like the theorem environment, except that the theorem style ~example~
  is used.
- A side-effect of using this theorem style is that the contents is put in an
  ~exampleblock~ instead of a ~block~.

**** Example                                                        :B_example:
     :PROPERTIES:
     :BEAMER_env: example
     :END:

Contents of example

**** End of example                                           :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

*** ~example~ environment

- Simpler solution:

#+begin_example
Contents of example
#+end_example

*** ~examples~ environment

*** ~proof~ environment

- Typesets a proof. FINAL dot added...

**** proof                                                            :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:

- <1-| alert@1> Suppose /p/ were the largest prime number.
- <2-> Let /q/ be the product of the first /p/ numbers.
- <3-> Then /q + 1/ is not divisible by any of them.
- <1-> But /q + 1/ is greater than /1/, thus divisible by some prime number
  not in the first /p/ numbers.\qedhere

**** End of proof                                             :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

*** ~beamercolorbox~ environment

- Create colored boxes.
- The ~beamer color~ is the heading text, for example ~title in head/foot~.

**** beamercolorbox                                          :B_beamercolorbox:
     :PROPERTIES:
     :BEAMER_env: beamercolorbox
     :END:

Text

**** End of beamercolorbox                                    :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

*** ~verse~ environment

**** verse                                                            :B_verse:
     :PROPERTIES:
     :BEAMER_env: verse
     :END:

Contents of verse

**** End of verse                                             :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

*** ~verse~ environment

- Simpler solution:

#+begin_verse
Contents of verse
#+end_verse

*** ~quotation~ environment

- Use ~quote~ or ~quotation~ to typeset quoted text.
- ~quotation~ has paragraph indentation.

**** quotation                                                    :B_quotation:
     :PROPERTIES:
     :BEAMER_env: quotation
     :END:

Contents of quotation

**** End of quotation                                         :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

*** ~quote~ environment

- Use ~quote~ or ~quotation~ to typeset quoted text.
- ~quote~ hasn't paragraph indentation.

**** quote                                                            :B_quote:
     :PROPERTIES:
     :BEAMER_env: quote
     :END:

Contents of quote

**** End of quote                                             :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

*** ~quote~ environment

- Use ~quote~ or ~quotation~ to typeset quoted text.
- ~quote~ hasn't paragraph indentation.
- Simpler solution:

#+begin_quote
Contents of quote
#+end_quote

#+begin_quote
"Getting ragged-left text in a Beamer presentation exported from Org does not
seem as easy as I expected."
#+end_quote

XXX
# #+LaTeX: \begin{raggedleft}
# From "Loris' Adventures in Orgland"
# #+LaTeX: \par\end{raddedleft}

*** Verbatim

#+begin_src c
int main (void)
{
  std::vector<bool> is_prime (100, true);
  for (int i = 2; i < 100; i++)
    if (is_prime[i])
      {
        std::cout << i << " ";
        for (int j = i; j < 100;
             is_prime [j] = false, j+=i);
      }
  return 0;
}
#+end_src

- This code block is properly indented in both Org and in PDF

  #+begin_src java
  if (test)
  {
      doit
  }
  #+end_src

*** Add extra environments

For simple environments, use:

# #+attr_latex: :options {3}
# #+begin_myenvironment
# Test of a new
# environment
# #+end_myenvironment

I think we should changes some environment placeholders:

  + Introduce %r which would stand for the raw heading (without any
    processing)
  + %H and %U would use the raw heading text instead.

The previous definition would become:

  # '("textpos1" "w" "\\begin{textblock}%r \\visible %a {" "} \\end{textblock}")

WDYT?

- Environment options may be given using the BEAMER_opt property. They will
  be enclosed in square brackets and inserted where %o appears in the
  environment definition.
  (with an example, but I can't think of one now)

- Additional arguments may be written into the environment's heading, and
  inserted into the LaTeX string using %r (raw heading text, no processing).

** Special cases

*** appendix

You can add an appendix (frames that you do not intend to show during your
talk, but which might be useful to answer a question) by inserting such a *level
1 heading* after the last regular slide of your actual presentation:

#+begin_src org
,* Appendix material follows                                        :B_appendix:
  :PROPERTIES:
  :BEAMER_env: appendix
  :END:

# Backup slides
#+end_src

Ignoring page number in backup slides can be achieved by setting the option
~noframenumbering~ on all "backup" slides.

*** COMMENT note

To keep your presentation notes (reminders about what to say), add a heading
below the frame, and select the ~note~ environment.

#+begin_src org
,#+LATEX_HEADER: \setbeameroption{show notes}

,*** Some note                                                          :B_note:
    :PROPERTIES:
    :BEAMER_env: note
    :END:

- Stress this first.
- Then this.
#+end_src

*** noteNH

Note with its title ignored.

*** againframe

You can "continue" frames that you previously started somewhere (but where
certain details have been suppressed) at a much later point (for example only
in the appendix) to show additional slides there.

For convenience (since those are mandatory), when asking for an ~againframe~, Org
Beamer always asks for:

- ~BEAMER_ref~ property to *refer*, using link syntax, to (the label of) the *frame
  being resumed*, and

- ~BEAMER_act~ property to set the *overlay specification*.

An advantage is that you don't need to know the label of the frame being
resumed: ~:BEAMER_ref: *My frame title~.

#+begin_src latex
\againframe<BEAMER_act>{BEAMER_ref's name}
#+end_src

*Contents are ignored*.

XXX How to label a frame?  Via ~:BEAMER_opt: label=id~ or via other means?

*** ignoreheading                                             :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:

- A heading with an ~ignoreheading~ environment will have only its contents
  inserted in the output.
  + Contents is not inserted in any ~frame~ environment...

- This special value is useful to have data between frames, or to properly
  *close a ~column~ environment*.

* Overlays [Animations?]

overprint

> What may not be easy or possible is to use the \only directive, which is
> what I used in my previous response to you.

You can always use the only environment.
<https://github.com/suvayu/.emacs.d/blob/master/org-mode-config.el#L215>

That said, I think overlays with only is not as smooth as with simple
overlay specifications to regular environments or macros like
~\includegraphics~, ~\item~, etc.

As for an :overlay specification, I believe it is already supported but
only for lists (ox-beamer.el:725).  I would love to have that for images
too!

** Overlay specification: BEAMER_act

Set *overlay* specifications in current block to *create dynamic effects* (/multiple
slides/, called /overlays/, for a single frame) = old ~BEAMER_envargs~ property.

Headings support the ~BEAMER_act~ property:

#+begin_src org
,* Heading
  :PROPERTIES:
  :BEAMER_act: [+-]
  :END:

  # Diff with [<+->]?

  - Item
  - Item
#+end_src

It is translated as:

- an overlay/action specification, or
- a default overlay specification when enclosed within square brackets.

XXX <> seem to be added when they aren't present. Copied as is if present.

Dynamic lists are possible on a case by case basis :

#+begin_src org
,#+ATTR_BEAMER: :overlay +-
- Item 1
- Item 2
#+end_src

#+begin_src org
- @@beamer:<1->@@ Item 1
- @@beamer:<2->@@ Item 2
#+end_src

** The Queen's old armchair                                           :B_block:
  :PROPERTIES:
  :BEAMER_env: block
  :BEAMER_envargs: <1->
  :END:

- Princess Anne
- Prince Charles
- corgis

** Question on ML

#+begin_src latex
\begin{figure}
  \begin{center}
    \includegraphics<1>[width=.7\textwidth]{figure1}
    \includegraphics<2>[width=.7\textwidth]{figure2}
    \includegraphics<3->[width=.7\textwidth]{figure3}
   \end{center}
\end{figure}
#+end_src

The following works for me:

#+begin_src org
 #+Beamer: \only<1>{
 [[file:figure1.png]]
 #+Beamer: }\only<2>{
 [[file:figure2.png]]
 #+Beamer: }\only<3->{
 [[file:figures3.png]]
 #+Beamer: }
#+end_src

There is the ~BEAMER_act~ property that can be used to apply overlay
information on blocks but I don't think it's possible on individual
figures.  Of course, you could put each figure in a separate block.  The
following/attached will match what you had originally.

#+begin_src org
 #+options: H:1
 * The slide
 ** figure 1
    :PROPERTIES:
    :beamer_act: <1>
    :END:
    [[file:chromosome.png]]
 ** figure 2
    :PROPERTIES:
    :beamer_act: <2>
    :END:
    [[file:diagram.png]]
 ** figure 3
    :PROPERTIES:
    :beamer_act: <3->
    :END:
 [[file:equation1.png]]
#+end_src

* Options

** Option specification: BEAMER_opt

Insert *optional arguments for the current ~frame~ environment* using the
~BEAMER_OPT~ property.

XXX or block?  See http://orgmode.org/manual/Beamer-export.html.

I'd still like to see something more like a "for-dummies" explanation of
passing options and arguments to LaTeX entities. I'm not saying the
documentation is woefully inadequate (hardly that -- Suvayu's page got me
rather far, and I got stuck on a couple of details). My experience was: it
never would have occurred to me on my own to use the heading text for
LaTeX code, and if there was a hint anywhere in the docs to suggest that
this would be the way to go, I didn't find it. That's a conceptual leap
that passed me by.

- This is for frames, and for environments within a frame

- It specifies options for the current frame or block, and will automatically
  be enclosed within square brackets.

- ~fragile~ option is added automatically

- You might want to put ~allowframebreaks=0.9~ there

* Columns

** Column specification: BEAMER_COL

** Splitting a frame into multiple columns

To get multiple columns in a frame:

1. Press ~C-c C-b |~ (~BMCOL~) on the headings (inside the frame) which will
   become columns

   The heading of column environments won't be outputted in the PDF file.

2. Specify the *column width* as a *percentage* of ~\textwidth~

   *!CAUTION!*  *No absolute width*, such as 4cm, which wouldn't be correctly
   translated...

Instead of ~block~, those structural environments will become ~column~ (with the
width parameter as a factor of ~\textwidth~).

Consecutive ~column~ environments will be put in a ~columns~ environment.

**** First column                                                       :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.39
     :END:

First column

Two \\ lines.

The arithmetic mean is equal to the summation of ~n~ numbers divided by ~n~.

**** Second column                                                      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.39
     :END:

Second column

One line (but aligned).

$\frac{1}{n} \sum_{i=1}^{n} x_{i}$

*** Multiple columns

If you want to float an image to the left or right, simply include it within
a 2-column layout.

**** Image                                                              :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.39
     :END:

#+ATTR_LaTeX: :width 3cm
[[file:images/square.png]]
# mygraphic.jpg

**** Text                                                               :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.39
     :END:

This text will appear \\ to the right.

** ~column~

You can change the percent space of each column.

If you want like one column to take 70% and the other to take 30%, you can
change that as follows:

XXX

** ~columns~

* Guidelines for creating presentations

** Frame structure (Explicit page breaking)

If the text does not fit on a single slide, all you have to do to automatically
break up the frame into several frames, is set the option ~allowframebreaks~.

- For allowing frame breaks on a *frame by frame* basis[fn:: Until the Beamer
  [[https://bitbucket.org/rivanvx/beamer/issue/265/including-frame-label-option-stops ][issue #265]] is solved, we need to unset the ~framelabel~ as shown above
  (~label=~).]

  #+begin_src org :eval no
  ,** A very long "frame" with breaks
     :PROPERTIES:
     :BEAMER_opt: allowframebreaks,label=
     :END:
  #+end_src

  XXX This property shouldn't be interpreted for the current slide!

- For allowing frame breaks for the *whole* document[fn:: Till Tantau (author of
  Beamer) was really not keen on the idea of setting the auto-breaking frames
  option globally.]

  #+begin_src org :eval no
  ,#+BIND: org-beamer-frame-default-options "allowframebreaks"
  #+end_src

** Vertical alignment

You can specify /top/ *vertical alignment* globally by the ~t~ class option:

#+begin_src org
,#+LaTeX_CLASS_OPTIONS: [t]
#+end_src

For single frames, you can use the same option locally:

#+begin_src org
,* Vertically top-aligned
  :PROPERTIES:
  :BEAMER_opt: t
  :END:

...
#+end_src

You can add that *special property* by editing the ~Opt~ column within the "column
view" (first press ~C-c C-x C-c~) .

*** Result of an evaluation on two columns

Balancing text in columns.

#+LATEX_HEADER: \usepackage{multicol}

#+LaTeX: \begin{multicols}{2}

... a fancy verbatim block ...

- Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
  tempor incididunt ut labore et dolore magna aliqua.

- Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut
  aliquip ex ea commodo consequat.

- Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore
  eu fugiat nulla pariatur.

- Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia
  deserunt mollit anim id est laborum.

#+LaTeX: \end{multicols}

*** Big title in the middle

\begin{center}
  \begin{minipage}[h]{.75\textwidth}
    \centering
    {\Large This is my BIG title!}
  \end{minipage}
\end{center}

** Using graphics

How to center pictures horizontally?

*** Figures

#+ATTR_LaTeX: :width 3cm
[[file:images/dot.png]]
# \pgfuseimage{myfigure}

#+ATTR_LaTeX: :width 3cm
#+CAPTION: The caption is /always/ placed *below* the figure.
[[file:images/square.png]]
# myotherfigure

*** TikZ

http://tex.stackexchange.com/questions/64075/beamers-visible-inside-a-tikz-node

#+begin_latex
\begin{tikzpicture}
  \node[align=center] {I'm {\visible<+->{very}}\\happy.};
\end{tikzpicture}
#+end_latex

** Absolute positioning

You can also place the logo on an absolute position of the titlepage using ~tikz~
or ~textpos~.

Note -- ~textpos~ is incompatible to ~pgfpages~, even though it is mentioned in the
beamer userguide as the way to go for absolute positioning.

Here an example using ~tikz~:

#+BEGIN_SRC latex
\XXXbegin{frame}
   \tikz [remember picture,overlay]
    \node at
        ([yshift=3cm]current page.south)
        %or: (current page.center)
        {\includegraphics[width=\textwidth,height=.5\textheight]{someimage}};
   \titlepage
\XXXend{frame}
#+END_SRC

** More on Org: Exporting a subtree

* Power

Skip proof

[[Proof details]]

* Summary

** Summary

** For further reading

# Mettre ox-beamer, beamer.pdf, org manual, etc. comme références

#+begin_latex
\begin{thebibliography}{10}

  \beamertemplatebookbibitems
  \bibitem{sal:b:formal-languages}
    A.~Salomaa.
    \newblock {\em Formal Languages}.
    \newblock Academic Press, 1973.
    \pause

  \beamertemplatearticlebibitems
  \bibitem{dij:j:smoothsort}
    E.~Dijkstra.
    \newblock Smoothsort, an alternative for sorting in situ.
    \newblock {\em Science of Computer Programming}, 1(3):223--233,
    1982.
    \pause

  \bibitem{FeldmanO1973}
    E.~Feldman and J.~Owings, Jr.
    \newblock A class of universal linear bounded automata.
    \newblock {\em Information Sciences}, 6:187--190, 1973.
    \pause

  \bibitem{JancarMPV1995}
    P.~Jan{\v c}ar, F.~Mr{\'a}z, M.~Pl{\'a}tek, and J.~Vogel.
    \newblock Restarting automata.
    \newblock {\em FCT Conference 1995}, LNCS 985, pages
    282--292. 1995.

\end{thebibliography}
#+end_latex

* Appendix NAME XXX                                                :B_appendix:
  :PROPERTIES:
  :BEAMER_env: appendix
  :END:

** Proof details

Text omitted in main talk.

** More details

Even more additional material.

** Abbreviations

#+TITLE:     Org Beamer quick reference card
#+AUTHOR:    Fabrice Niessen
#+EMAIL:     (concat "fniessen" at-sign "pirilampo.org")
#+Time-stamp: <2014-05-21 Wed 23:22>
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:nil ^:{}

#+PROPERTY: eval no
# #+SETUPFILE: ~/src/org-style/setup/bigblow-local-abs.setup
#+SETUPFILE: ~/src/org-style/setup/leuven-local-abs.setup

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [presentation, t]
#+BEAMER_THEME: Boadilla
#+COLUMNS: %45ITEM %10BEAMER_env(Env) %10BEAMER_act(Act) %4BEAMER_col(Col) %8BEAMER_opt(Opt)
#+PROPERTY: BEAMER_col_ALL 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 0.0 :ETC

#+BEAMER_THEME: Boadilla
#+BEAMER_COLOR_THEME: default

#+INCLUDE: "~/src/stage-latex-dunkerque-2013/style/listings.org"


#+LaTeX_HEADER: \usepackage{tikz}
# For every picture that defines or uses external nodes, you'll have to
# apply the 'remember picture' style. To avoid some typing, we'll apply
# the style to all pictures.
#+LaTeX: \tikzstyle{every picture}+=[remember picture]

* Tasks

** TODO Beamerarticle

** TODO Citations

* Overview

** Description

Welcome to *Org Beamer reference card*.  It contains the reference documentation
that describes how to *write presentations* using:

- [[http://orgmode.org/][Org mode]] 8 and
- the [[https://bitbucket.org/rivanvx/beamer/][LaTeX Beamer class]].

Those *free* tools allow you to easily produce *high quality* *PDF files* which are
going to look on /every/ computer exactly the way they looked on /your/ computer.

** Objectives

As they are created *like any other Org mode document*, preparing presentations
with Org mode is very different from preparing them with WYSWYG programs such
as PowerPoint, Impress or Keynote.

The obvious advantage of this approach is that *you don't have to know LaTeX* in
order to *create Beamer presentations*.

** Requirements

A working LaTeX installation is required for exporting to PDF. If it is not yet
installed on your system, install [[http://www.tug.org/texlive/][TeX Live]] (for example).

* Creating presentations

** Creating a title page

A title page is automatically inserted into the first frame.

By default, it will arrange the following elements on the title page:
- the document *title* (file name, if not specified),
- the *author(s)*'s names (~user-full-name~, if not specified), and
- a *date* (~\today~, if nothing specified).

#+begin_src org
,#+TITLE:     Document title
,#+AUTHOR:    Author's name
,#+DATE:      Date
#+end_src

Other elements:
- the document subtitle,
- their affiliation,
- a title graphic, and

The following commands are useful for this template:
· \insertinstitute inserts the institute.
· \insertsubtitle inserts a version of the document title that is useful for the title page.
· \inserttitlegraphic inserts the title graphic into a template.

Email?

#+begin_src org
,#+LaTeX_HEADER:       \institute[short name]{My institute 1}
,#+LaTeX_HEADER_EXTRA: \institute[short name]{My institute 2}
,#+BEAMER_HEADER:      \institute[short name]{My institute 3}
#+end_src

The inner theme dictates how the title page is rendered.

** Global structure

Org mode presentations contain headings at different levels.

By default,

- Headings at the *first* outline level will become *titles* of the different
  slides (called *frames* in Beamer),

- Deeper levels will be used as structural environments, and

- The "Contents" frame is blank.

** Creating a table of contents

If you set the ~H~ option from the ~#+OPTIONS:~ keyword such as:

#+begin_src org
,#+OPTIONS: H:2
#+end_src

then:

- Top-level headlines become *sections* listed in the *table of contents* (created
  by default), and

- *Second*-level headlines become the *frames*.

In many themes, sections and subsections (when ~H:3~) appear in the sidebar or
headline.

** Creating a simple frame

#+begin_src org
,* Introduction

,** A title
   #+BEAMER: \framesubtitle{A subtitle}

Some content.
#+end_src

The *subtitle* does not have an Org syntax because it's specific to the Beamer
back-end only.

** Create a handout

#+begin_src org
,#+LATEX_CLASS_OPTIONS: [handout]

,#+LaTeX_HEADER: \usepackage{pgfpages}
,#+LaTeX_HEADER: \mode<handout>{\pgfpagesuselayout{2 on 1}[a4paper,border shrink=5mm]}
#+end_src

** Print as article

** Present a bibliography

* Keywords specific to the Beamer back-end

** LaTeX class

#+begin_src org
,#+LATEX_CLASS: beamer
,#+LATEX_CLASS_OPTIONS:
#+end_src

Common options:

- 8pt, 9pt, 10pt, *11pt*, 12pt, 14pt, 17pt, 20pt
- draft: no graphics, footlines,...
- handout: no overlays

,#+LaTeX_CLASS_options: [bigger,allowframebreaks]

** LaTeX preamble

Append any line of code in the LaTeX preamble with:

#+begin_src org
,#+BEAMER_HEADER: \usepackage{...}
#+end_src

It will go in the ~[EXTRA]~ placeholder of the header associated to the ~beamer~
LaTeX class (see ~org-latex-classes~).

Other possibilities:

#+begin_src org
,#+LaTeX_HEADER:       \institute[short name]{My institute 1}
,#+LaTeX_HEADER_EXTRA: \institute[short name]{My institute 2}
,#+BEAMER_HEADER:      \institute[short name]{My institute 3}
#+end_src

** Affiliated keywords

The Beamer back-end reads both

- ~#+ATTR_LATEX:~ and
- ~#+ATTR_BEAMER:~

affiliated keywords.

** Appearance of the presentation

#+begin_src org
,#+BEAMER_THEME: Boadilla
#+end_src

is equivalent (for Boadilla) to:

#+begin_src org
,#+BEAMER_COLOR_THEME: dolphin
,#+BEAMER_FONT_THEME:  default
,#+BEAMER_INNER_THEME: [shadow]rounded
,#+BEAMER_OUTER_THEME: infolines
#+end_src

* Usage of library =ox-beamer.el=

** Beamer back-end (for Org export engine)

Type:

#+begin_src emacs-lisp
M-x load-library RET ox-beamer RET
#+end_src

to load the Beamer back-end library, and to obtain *extra commands* in the LaTeX
export menu:

- ~C-c C-e l B~ ::
     Export as LaTeX buffer (Beamer).

- ~C-c C-e l b~ ::
     Export as LaTeX file (Beamer).

- ~C-c C-e l P~ ::
     *Export as PDF file* (Beamer).

- ~C-c C-e l O~ ::
     Export as PDF file and open (Beamer).

** Structure editing support

Type:

#+begin_src emacs-lisp
M-x org-beamer-mode RET
#+end_src

to load the minor mode ~org-beamer-mode~ *easing the edition* of the *document
structure* (through the key binding ~C-c C-b~, which offers fast selection of
a [[id:77f1b7a3-6e7d-4f2b-bd1f-02e6f02bba2f][Beamer environment]]).

You can also turn it on with:

#+begin_src org
,#+STARTUP: beamer
#+end_src

in your document.

* Column view

For a column view of options and configurations for the individual frames

#+begin_src org
,#+COLUMNS: %45ITEM %10BEAMER_env(Env) %10BEAMER_act(Act) %4BEAMER_col(Col) %8BEAMER_opt(Opt)
,#+COLUMNS: %20ITEM %13BEAMER_env(Env) %6BEAMER_envargs(Args) %4BEAMER_col(Col) %7BEAMER_extra(Extra)
#+end_src

* Environments

** Environment specification (=BEAMER_env= property)

- This becomes visible through the =B_frame= tag (visual aid only).

** Frames

*** frame

- Headlines become frames when their level is equal to ~org-beamer-frame-level~
  (or ~H~ value in the ~OPTIONS~ line).

- Though, if a headline in the current tree has a ~BEAMER_env~ property set to
  either ~frame~ or ~fullframe~, its level overrides the variable, giving you some
  flexibility in deciding *what is* and what isn't *a frame*.

  This works in both "directions": to *add or* to *remove sectioning levels*
  above the current headline (which becomes a frame)!

*** fullframe                                                     :B_fullframe:
    :PROPERTIES:
    :BEAMER_env: fullframe
    :END:

- A ~fullframe~ is a ~frame~ with an ignored title (~frametitle~ is set to the empty
  string).

** Blocks
   :PROPERTIES:
   :ID:       77f1b7a3-6e7d-4f2b-bd1f-02e6f02bba2f
   :END:

*** Environment specification (~BEAMER_env~ property)

Use a different *block type for the current "block" environment* (default:
~block~).

*** ~structureenv~ environment

- For highlighting text.
- To help the audience see the structure of your presentation.

**** structureenv                                              :B_structureenv:
     :PROPERTIES:
     :BEAMER_env: structureenv
     :END:

Paragraph Heading.

**** End of structureenv                                      :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

*** ~block~ environment

**** Answered Questions                                               :B_block:
     :PROPERTIES:
     :BEAMER_env: block
     :END:

How many primes are there?

**** Open Questions                                                   :B_block:
     :PROPERTIES:
     :BEAMER_env: block
     :END:

Is every even number the sum of two primes?

**** End of block                                             :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

*** ~block~ environment = the default? Yes, but white lines NOT suppressed!

**** Answered Questions

How many primes are there?

**** Open Questions

Is every even number the sum of two primes?

*** ~alertblock~ environment                                     :B_alertblock:
    :PROPERTIES:
    :BEAMER_env: alertblock
    :END:

- Inserts a block whose title is highlighted.
- Behaves like the ~block~ environment otherwise.

**** Wrong theorem

/1=2/.

**** End of alertblock                                        :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

*** ~exampleblock~ environment

- Inserts a block that is supposed to be an example.
- Behaves like the ~block~ environment otherwise.

**** Example                                                   :B_exampleblock:
     :PROPERTIES:
     :BEAMER_env: exampleblock
     :END:

The set /{1,2,3,5}/ has four elements.

**** End of exampleblock                                      :B_ignoreheading:
      :PROPERTIES:
      :BEAMER_env: ignoreheading
      :END:

*** ~theorem~ environment

- Inserts a theorem.

**** This title won't be displayed                                  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:

There is no largest prime number.

Org mode + Beamer = productivity^{2}

#+LaTeX: \hfill \(\qed\)

**** End of theorem                                           :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

If there is nothing after the block, no need to insert a heading for
demarcating the end.

*** ~theorem~ environment

- Inserts a theorem.
- Simpler solution
  + More readable
  + Less powerful: you can't nest blocks of the same type with this syntax

#+attr_latex: :options {Theorem}
#+begin_block
There is no largest prime number.
#+end_block

*** ~corollary~ environment

*** ~lemma~ environment

*** ~definition~ environment

- Behaves like the ~theorem~ environment, except that the theorem style
  ~definition~ is used.
- In this style, the body of a ~theorem~ is typeset in an upright font.

**** definition                                                  :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:

Contents of definition

**** End of definition                                        :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

*** ~definitions~ environment

*** ~fact~ environment

*** ~example~ environment

- Behaves like the theorem environment, except that the theorem style ~example~
  is used.
- A side-effect of using this theorem style is that the contents is put in an
  ~exampleblock~ instead of a ~block~.

**** Example                                                        :B_example:
     :PROPERTIES:
     :BEAMER_env: example
     :END:

Contents of example

**** End of example                                           :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

*** ~example~ environment

- Simpler solution:

#+begin_example
Contents of example
#+end_example

*** ~examples~ environment

*** ~proof~ environment

- Typesets a proof. FINAL dot added...

**** proof                                                            :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:

- <1-| alert@1> Suppose /p/ were the largest prime number.
- <2-> Let /q/ be the product of the first /p/ numbers.
- <3-> Then /q + 1/ is not divisible by any of them.
- <1-> But /q + 1/ is greater than /1/, thus divisible by some prime number
  not in the first /p/ numbers.\qedhere

**** End of proof                                             :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

*** ~beamercolorbox~ environment

- Create colored boxes.
- The ~beamer color~ is the headline text, for example ~title in head/foot~.

**** beamercolorbox                                          :B_beamercolorbox:
     :PROPERTIES:
     :BEAMER_env: beamercolorbox
     :END:

Text

**** End of beamercolorbox                                    :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

*** ~verse~ environment

**** verse                                                            :B_verse:
     :PROPERTIES:
     :BEAMER_env: verse
     :END:

Contents of verse

**** End of verse                                             :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

*** ~verse~ environment

- Simpler solution:

#+begin_verse
Contents of verse
#+end_verse

*** ~quotation~ environment

- Use ~quote~ or ~quotation~ to typeset quoted text.
- ~quotation~ has paragraph indentation.

**** quotation                                                    :B_quotation:
     :PROPERTIES:
     :BEAMER_env: quotation
     :END:

Contents of quotation

**** End of quotation                                         :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

*** ~quote~ environment

- Use ~quote~ or ~quotation~ to typeset quoted text.
- ~quote~ hasn't paragraph indentation.

**** quote                                                            :B_quote:
     :PROPERTIES:
     :BEAMER_env: quote
     :END:

Contents of quote

**** End of quote                                             :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

*** ~quote~ environment

- Use ~quote~ or ~quotation~ to typeset quoted text.
- ~quote~ hasn't paragraph indentation.
- Simpler solution:

#+begin_quote
Contents of quote
#+end_quote

#+begin_quote
"Getting ragged-left text in a Beamer presentation exported from Org does not
seem as easy as I expected."
#+end_quote

#+LaTeX: \begin{raggedleft}
From "Loris' Adventures in Orgland"
#+LaTeX: \par\end{raddedleft}

*** Verbatim

#+begin_src c
int main (void)
{
  std::vector<bool> is_prime (100, true);
  for (int i = 2; i < 100; i++)
    if (is_prime[i])
      {
        std::cout << i << " ";
        for (int j = i; j < 100;
             is_prime [j] = false, j+=i);
      }
  return 0;
}
#+end_src

- This code block is properly indented in both Org and in PDF

  #+begin_src java
  if (test)
  {
      doit
  }
  #+end_src

*** Add extra environments

For simple environments, use:

# #+attr_latex: :options {3}
# #+begin_myenvironment
# Test of a new
# environment
# #+end_myenvironment

I think we should changes some environment placeholders:

  + Introduce %r which would stand for the raw headline (without any
    processing)
  + %H and %U would use the raw headline text instead.

The previous definition would become:

  # '("textpos1" "w" "\\begin{textblock}%r \\visible %a {" "} \\end{textblock}")

WDYT?

- Environment options may be given using the BEAMER_opt property. They will
  be enclosed in square brackets and inserted where %o appears in the
  environment definition.
  (with an example, but I can't think of one now)

- Additional arguments may be written into the environment's headline, and
  inserted into the LaTeX string using %r (raw headline text, no processing).

** Special cases

*** appendix

You can add an appendix (frames that you do not intend to show during your
talk, but which might be useful to answer a question) by inserting such a *level
1 headline* after the last regular slide of your actual presentation:

#+begin_src org
,* Appendix material follows                                        :B_appendix:
  :PROPERTIES:
  :BEAMER_env: appendix
  :END:

# Backup slides
#+end_src

Ignoring page number in backup slides can be achieved by setting the option
~noframenumbering~ on all "backup" slides.

*** note

#+begin_src org
,#+LaTeX_HEADER: \setbeameroption{show notes}

,*** Some note                                                          :B_note:
    :PROPERTIES:
    :BEAMER_env: note
    :END:

- Stress this first.
- Then this.
#+end_src

*** noteNH

Note with its title ignored.

*** againframe

You can "continue" frames that you previously started somewhere (but where
certain details have been suppressed) at a much later point (for example only
in the appendix) to show additional slides there.

For convenience (since those are mandatory), when asking for an ~againframe~, Org
Beamer always asks for:

- ~BEAMER_ref~ property to *refer*, using link syntax, to (the label of) the *frame
  being resumed*, and

- ~BEAMER_act~ property to set the *overlay specification*.

An advantage is that you don't need to know the label of the frame being
resumed: ~:BEAMER_ref: *My frame title~.

#+begin_src latex
\againframe<BEAMER_act>{BEAMER_ref's name}
#+end_src

*Contents are ignored*.

XXX How to label a frame?  Via ~:BEAMER_opt: label=id~ or via other means?

*** ignoreheading                                             :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:

- A headline with an ~ignoreheading~ environment will have only its contents
  inserted in the output.
  + Contents is not inserted in any ~frame~ environment...

- This special value is useful to have data between frames, or to properly
  *close a ~column~ environment*.

* Overlays

overprint

> What may not be easy or possible is to use the \only directive, which is
> what I used in my previous response to you.

You can always use the only environment.
<https://github.com/suvayu/.emacs.d/blob/master/org-mode-config.el#L215>

That said, I think overlays with only is not as smooth as with simple
overlay specifications to regular environments or macros like
\includegraphics, \item, etc.

As for an :overlay specification, I believe it is already supported but
only for lists (ox-beamer.el:725).  I would love to have that for images
too!

** Overlay specification (~BEAMER_act~ property)

Set *overlay* specifications in current block to *create dynamic effects* (/multiple
slides/, called /overlays/, for a single frame) = old ~BEAMER_envargs~ property.

Headlines support the ~BEAMER_act~ property:

#+begin_src org
,* Headline
  :PROPERTIES:
  :BEAMER_act: [+-]
  :END:

  # Diff with [<+->]?

  - Item
  - Item
#+end_src

It is translated as:

- an overlay/action specification, or
- a default overlay specification when enclosed within square brackets.

XXX <> seem to be added when they aren't present. Copied as is if present.

Dynamic lists are possible on a case by case basis :

#+begin_src org
,#+ATTR_BEAMER: :overlay +-
- Item 1
- Item 2
#+end_src

#+begin_src org
- @@beamer:<1->@@ Item 1
- @@beamer:<2->@@ Item 2
#+end_src

** The Queen's old armchair                                           :B_block:
  :PROPERTIES:
  :BEAMER_env: block
  :BEAMER_envargs: <1->
  :END:

- Princess Anne
- Prince Charles
- corgis

** Question on ML

#+begin_src latex
\begin{figure}
  \begin{center}
    \includegraphics<1>[width=.7\textwidth]{figure1}
    \includegraphics<2>[width=.7\textwidth]{figure2}
    \includegraphics<3->[width=.7\textwidth]{figure3}
   \end{center}
\end{figure}
#+end_src

The following works for me:

#+begin_src org
 #+beamer: \only<1>{
 [[file:figure1.png]]
 #+beamer: }\only<2>{
 [[file:figure2.png]]
 #+beamer: }\only<3->{
 [[file:figures3.png]]
 #+beamer: }
#+end_src

There is the ~BEAMER_act~ property that can be used to apply overlay
information on blocks but I don't think it's possible on individual
figures.  Of course, you could put each figure in a separate block.  The
following/attached will match what you had originally.

#+begin_src org
 #+options: H:1
 * The slide
 ** figure 1
    :PROPERTIES:
    :beamer_act: <1>
    :END:
    [[file:chromosome.png]]
 ** figure 2
    :PROPERTIES:
    :beamer_act: <2>
    :END:
    [[file:diagram.png]]
 ** figure 3
    :PROPERTIES:
    :beamer_act: <3->
    :END:
 [[file:equation1.png]]
#+end_src

* Options

** Option specification (~BEAMER_opt~ property)

Insert *optional arguments for the current ~frame~ environment* using the
~BEAMER_OPT~ property.

XXX or block?  See http://orgmode.org/manual/Beamer-export.html.

I'd still like to see something more like a "for-dummies" explanation of
passing options and arguments to LaTeX entities. I'm not saying the
documentation is woefully inadequate (hardly that -- Suvayu's page got me
rather far, and I got stuck on a couple of details). My experience was: it
never would have occurred to me on my own to use the headline text for
LaTeX code, and if there was a hint anywhere in the docs to suggest that
this would be the way to go, I didn't find it. That's a conceptual leap
that passed me by.

- This is for frames, and for environments within a frame

- It specifies options for the current frame or block, and will automatically
  be enclosed within square brackets.

- ~fragile~ option is added automatically

- You might want to put ~allowframebreaks=0.9~ there

* Columns

** Column specification (~BEAMER_COL~ property)

** Splitting a frame into multiple columns

To get multiple columns in a frame:

1. Press ~C-c C-b |~ (~BMCOL~) on the headlines (inside the frame) which will
   become columns

   The headline of column environments won't be outputted in the PDF file.

2. Specify the *column width* as a *percentage* of ~\textwidth~

   *!CAUTION!*  *No absolute width*, such as 4cm, which wouldn't be correctly
   translated...

Instead of ~block~, those structural environments will become ~column~ (with the
width parameter as a factor of ~\textwidth~).

Consecutive ~column~ environments will be put in a ~columns~ environment.

**** First column                                                       :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.39
     :END:

Two \\ lines.

**** Second column                                                      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.39
     :END:

One line (but aligned).

*** Multiple columns

**** First column                                                       :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.39
     :END:

Two \\ lines.

**** Second column                                                      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.39
     :END:

#+ATTR_LaTeX: :width 3cm
[[file:images/square.png]]
# mygraphic.jpg

** ~column~

** ~columns~

* Guidelines for creating presentations

 > How can I put options that would apply to a frame (e.g.,
 > \allowframebreaks)?

 #+begin_src org
 ,#+BI--ND: org-beamer-frame-default-options "allowframebreaks"
 #+end_src

 for allowing frame breaks for the whole document,

 *** A very long slide
     :PROPERTIES:
     :BEAMER_env: [allowframebreaks]
     :END:

 for allowing on a frame by frame basis.

** Frame structure (Explicit page breaking)

If the text does not fit on a single slide, all you have to do to automatically
break up the frame into several frames, is set the option ~allowframebreaks~:

#+begin_src org
,** A long "frame" with breaks
   :PROPERTIES:
   :BEAMER_opt: allowframebreaks,label=
   :END:
#+end_src

Until the Beamer [[https://bitbucket.org/rivanvx/beamer/issue/265/including-frame-label-option-stops ][issue #265]] is solved, we need to unset the framelabel as shown
above (~label=~).

** Vertical alignment

You can specify /top/ *vertical alignment* globally by the ~t~ class option:

#+begin_src org
,#+LaTeX_CLASS_OPTIONS: [t]
#+end_src

For single frames, you can use the same option locally:

#+begin_src org
,* Vertically top-aligned
  :PROPERTIES:
  :BEAMER_opt: t
  :END:

...
#+end_src

You can add that *special property* by editing the ~Opt~ column within the "column
view" (first press ~C-c C-x C-c~) .

*** Result of an evaluation on two columns

Balancing text in columns.

#+LaTeX_HEADER: \usepackage{multicol}

#+LaTeX: \begin{multicols}{2}

... a fancy verbatim block ...

- Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
  tempor incididunt ut labore et dolore magna aliqua.

- Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut
  aliquip ex ea commodo consequat.

- Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore
  eu fugiat nulla pariatur.

- Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia
  deserunt mollit anim id est laborum.

#+LaTeX: \end{multicols}

*** Big title in the middle

\begin{center}
  \begin{minipage}[h]{.75\textwidth}
    \centering
    {\Large This is my BIG title!}
  \end{minipage}
\end{center}

** Using graphics

How to center pictures horizontally?

*** Figures

#+ATTR_LaTeX: :width 3cm
[[file:images/dot.png]]
# \pgfuseimage{myfigure}

#+ATTR_LaTeX: :width 3cm
#+CAPTION: The caption is /always/ placed *below* the figure.
[[file:images/square.png]]
# myotherfigure

*** TikZ

http://tex.stackexchange.com/questions/64075/beamers-visible-inside-a-tikz-node

#+begin_latex
\begin{tikzpicture}
  \node[align=center] {I'm {\visible<+->{very}}\\happy.};
\end{tikzpicture}
#+end_latex

* Power

Skip proof

[[Proof details]]

* Summary

** Summary

** For further reading

# Mettre ox-beamer, beamer.pdf, org manual, etc. comme références

#+begin_latex
\begin{thebibliography}{10}

  \beamertemplatebookbibitems
  \bibitem{sal:b:formal-languages}
    A.~Salomaa.
    \newblock {\em Formal Languages}.
    \newblock Academic Press, 1973.
    \pause

  \beamertemplatearticlebibitems
  \bibitem{dij:j:smoothsort}
    E.~Dijkstra.
    \newblock Smoothsort, an alternative for sorting in situ.
    \newblock {\em Science of Computer Programming}, 1(3):223--233,
    1982.
    \pause

  \bibitem{FeldmanO1973}
    E.~Feldman and J.~Owings, Jr.
    \newblock A class of universal linear bounded automata.
    \newblock {\em Information Sciences}, 6:187--190, 1973.
    \pause

  \bibitem{JancarMPV1995}
    P.~Jan{\v c}ar, F.~Mr{\'a}z, M.~Pl{\'a}tek, and J.~Vogel.
    \newblock Restarting automata.
    \newblock {\em FCT Conference 1995}, LNCS 985, pages
    282--292. 1995.

\end{thebibliography}
#+end_latex

* Appendix NAME XXX                                                :B_appendix:
  :PROPERTIES:
  :BEAMER_env: appendix
  :END:

** Proof details

Text omitted in main talk.

** More details

Even more additional material.

** Abbreviations

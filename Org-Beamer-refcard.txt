#+TITLE:     Org Beamer quick reference card
#+AUTHOR:    Fabrice Niessen
#+EMAIL:     (concat "fniessen" at-sign "pirilampo.org")
#+Time-stamp: <2014-03-27 Thu 23:56>
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:nil toc:t ^:{}

#+PROPERTY: eval no
# #+SETUPFILE: ~/src/org-style/setup/bigblow-local-abs.setup
#+SETUPFILE: ~/src/org-style/setup/leuven-local-abs.setup

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [presentation]
#+BEAMER_THEME: Boadilla
#+COLUMNS: %45ITEM %10BEAMER_env(Env) %10BEAMER_act(Act) %4BEAMER_col(Col) %8BEAMER_opt(Opt)
#+PROPERTY: BEAMER_col_ALL 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 0.0 :ETC

#+BEAMER_THEME: Boadilla
#+BEAMER_COLOR_THEME: default

#+INCLUDE: "~/src/stage-latex-dunkerque-2013/style/listings.org"


#+LaTeX_HEADER: \usepackage{tikz}
# For every picture that defines or uses external nodes, you'll have to
# apply the 'remember picture' style. To avoid some typing, we'll apply
# the style to all pictures.
#+LaTeX: \tikzstyle{every picture}+=[remember picture]

* Overview

** Description

Welcome to *Org Beamer reference card*.  It contains the reference documentation
that describes how to *write presentations* using Org mode 8+ and the LaTeX
Beamer class (which allows producing *high quality* *PDF files* which are going to
look on every computer exactly the way they looked on your computer).

** Objectives

Preparing presentations with Org mode is different from preparing them with
WYSWYG programs such as PowerPoint, Impress or Keynote, as they are created
*like any other Org mode document*.

The obvious advantage of this approach is that *you don't have to know LaTeX* in
order to use Org mode's Beamer export and *create presentations*.

Org mode presentations contain headings at different levels.  By default,
headings at the first outline level will become titles of the different slides
(called frames in Beamer), and deeper levels will be used as structural
environments.

** Requirements

A working LaTeX installation is required for exporting to PDF. If it is not
yet installed on your system, install (for example) [[http://www.tug.org/texlive/][TeX Live]].

* Usage

** Library =ox-beamer.el=

*** Beamer back-end (for Org export engine)

Type:

#+begin_src emacs-lisp
M-x load-library RET ox-beamer RET
#+end_src

to load the Beamer back-end library, and to obtain *extra commands* in the LaTeX
export menu:

- =C-c C-e l B= ::
     As LaTeX buffer (Beamer).

- =C-c C-e l b= ::
     As LaTeX file (Beamer).

- =C-c C-e l P= ::
     As PDF file (Beamer).

- =C-c C-e l O= ::
     As PDF file and open (Beamer).

*** Editing support

Type:

#+begin_src emacs-lisp
M-x org-beamer-mode RET
#+end_src

to load the minor mode =org-beamer-mode= *easing the edition* of the document
structure (through the key binding =C-c C-b=).

You can also turn it on with:

#+begin_src org
,#+STARTUP: beamer
#+end_src

in your document.

* Options

** Beamer-related keywords

The =Beamer= back-end introduces the following keywords:

#+begin_src org
,#+BEAMER_THEME: Boadilla
#+end_src

which (for Boadilla) is equivalent to:

#+begin_src org
,#+BEAMER_COLOR_THEME: dolphin
,#+BEAMER_FONT_THEME:  default
,#+BEAMER_INNER_THEME: [shadow]rounded
,#+BEAMER_OUTER_THEME: infolines
#+end_src

Append any line of code in the LaTeX preamble with:

#+begin_src org
,#+BEAMER_HEADER:
#+end_src

XXX Is it [BEAMER-EXTRA] or [BEAMER-HEADER-EXTRA] in org-latex-classes?

** Keywords

=ox-beamer.el= reads both =ATTR_LATEX= and =ATTR_BEAMER=, when it makes sense.

** Properties

If you set

#+begin_src org
,#+OPTIONS: H:2
#+end_src

then:

- *Second*-level headlines become the *frames*, and
- Top-level headlines become *sections* (listed in the *table of contents*, which
  is created by default).

* Creating a frame

** Creating a frame

#+begin_src org
,** A title
   #+BEAMER: \framesubtitle{A subtitle}

Some content.
#+end_src

The "subtitle feature" does not have an Org syntax because it's specific to one
back-end only.

* Environment tags

** againframe

** appendix

You can add an appendix to your talk by using the =\appendix= command. You
should put frames and perhaps whole subsections into the appendix that you do
not intend to show during your presentation, but which might be useful to
answer a question. The =\appendix= command essentially just starts a new part
named =\appendixname=. However, it also sets up certain hyperlinks. Like other
parts, the appendix is kept separate from your actual talk.

** column

** columns

** frame

- Headlines become frames when their level is equal to =org-beamer-frame-level=
  (or =H= value in the =OPTIONS= line).

- Though, if a headline in the current tree has a =BEAMER_env= property set to
  either =frame= or =fullframe=, its level overrides the variable.

** fullframe                                                      :B_fullframe:
   :PROPERTIES:
   :BEAMER_env: fullframe
   :END:

- A =fullframe= is a =frame= with an ignored title
  + =frametitle= is set to the empty string

** ignoreheading                                              :B_ignoreheading:
   :PROPERTIES:
   :BEAMER_env: ignoreheading
   :END:

- A headline with an =ignoreheading= environment will have its contents only
  inserted in the output.
  + Contents is not inserted in any =frame= environment...

- This special value is useful to have data between frames, or to properly
  close a =column= environment.

** note

** noteNH

* Building a presentation

** Explicit page breaking

If the text does not fit on a single slide, all you have to do to automatically
break up the frame into several frames, is set the option =allowframebreaks=:

#+begin_src org
,** A long "frame" with breaks
   :PROPERTIES:
   :BEAMER_opt: allowframebreaks,label=
   :END:
#+end_src

Until the Beamer [[https://bitbucket.org/rivanvx/beamer/issue/265/including-frame-label-option-stops ][issue #265]] is solved, we need to unset the framelabel as shown
above (=label==).

* Figures and tables

** Figures

#+ATTR_LaTeX: :width 3cm
[[file:images/dot.png]]
# \pgfuseimage{myfigure}

#+ATTR_LaTeX: :width 3cm
#+CAPTION: The caption is /always/ placed *below* the figure.
[[file:images/square.png]]
# myotherfigure

** TikZ

http://tex.stackexchange.com/questions/64075/beamers-visible-inside-a-tikz-node

#+begin_latex
\begin{tikzpicture}
  \node[align=center] {I'm {\visible<+->{very}}\\happy.};
\end{tikzpicture}
#+end_latex

* Splitting a frame (slide) into multiple columns

** BMCOL

TODO Specify 5cm

BMCOL

*** First column                                                        :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.39
    :END:

Two \\ lines.

*** Second column                                                       :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.39
    :END:

One line (but aligned).

** Multiple columns

*** First column                                                        :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.39
    :END:

Two \\ lines.

*** Second column                                                       :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.39
    :END:

#+ATTR_LaTeX: :width 3cm
[[file:images/square.png]]
# mygraphic.jpg

** Result of an evaluation on two columns

#+LaTeX: \begin{multicols}{2}

... a fancy verbatim block ...

#+LaTeX: \end{multicols}

* Environments on blocks (=BEAMER_env=)

** =structureenv= environment

- For highlighting text.
- To help the audience see the structure of your presentation.

*** structureenv                                               :B_structureenv:
    :PROPERTIES:
    :BEAMER_env: structureenv
    :END:

Paragraph Heading.

*** End of structureenv                                       :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:

** =block= environment

*** Answered Questions                                                :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

How many primes are there?

*** Open Questions                                                    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

Is every even number the sum of two primes?

*** End of block                                              :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:

** =alertblock= environment                                      :B_alertblock:
   :PROPERTIES:
   :BEAMER_env: alertblock
   :END:

- Inserts a block whose title is highlighted.
- Behaves like the =block= environment otherwise.

*** Wrong theorem

/1=2/.

*** End of alertblock                                         :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:

** =exampleblock= environment

- Inserts a block that is supposed to be an example.
- Behaves like the =block= environment otherwise.

*** Example                                                    :B_exampleblock:
    :PROPERTIES:
    :BEAMER_env: exampleblock
    :END:

The set /{1,2,3,5}/ has four elements.

*** End of exampleblock                                       :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:

** =theorem= environment

- Inserts a theorem.

***                                                                 :B_theorem:
    :PROPERTIES:
    :BEAMER_env: theorem
    :END:

There is no largest prime number.

*** End of theorem                                            :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:

** =theorem= environment

- Inserts a theorem.
- Simpler solution
  + More readable
  + Less powerful: you can't nest blocks of the same type with this syntax

#+attr_latex: :options {Theorem}
#+begin_block
There is no largest prime number.
#+end_block

** =definition= environment

- Behaves like the =theorem= environment, except that the theorem style
  =definition= is used.
- In this style, the body of a =theorem= is typeset in an upright font.

*** definition                                                   :B_definition:
    :PROPERTIES:
    :BEAMER_env: definition
    :END:

Contents of definition

*** End of definition                                         :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:

** =example= environment

- Behaves like the theorem environment, except that the theorem style =example=
  is used.
- A side-effect of using this theorem style is that the contents is put in an
  =exampleblock= instead of a =block=.

*** Example                                                         :B_example:
    :PROPERTIES:
    :BEAMER_env: example
    :END:

Contents of example

*** End of example                                            :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:

** =example= environment

- Simpler solution:

#+begin_example
Contents of example
#+end_example

** =proof= environment

- Typesets a proof.

*** proof                                                             :B_proof:
    :PROPERTIES:
    :BEAMER_env: proof
    :END:

- <1-| alert@1> Suppose /p/ were the largest prime number.
- <2-> Let /q/ be the product of the first /p/ numbers.
- <3-> Then /q + 1/ is not divisible by any of them.
- <1-> But /q + 1/ is greater than /1/, thus divisible by some prime number
  not in the first /p/ numbers.\qedhere

*** End of proof                                              :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:

** =beamercolorbox= environment

- Create colored boxes.

*** beamercolorbox                                           :B_beamercolorbox:
    :PROPERTIES:
    :BEAMER_env: beamercolorbox
    :END:

Text

*** End of beamercolorbox                                     :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:

** =verse= environment

*** verse                                                             :B_verse:
    :PROPERTIES:
    :BEAMER_env: verse
    :END:

Contents of verse

*** End of verse                                              :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:

** =verse= environment

- Simpler solution:

#+begin_verse
Contents of verse
#+end_verse

** =quotation= environment

- Use =quote= or =quotation= to typeset quoted text.
- =quotation= has paragraph indentation.

*** quotation                                                     :B_quotation:
    :PROPERTIES:
    :BEAMER_env: quotation
    :END:

Contents of quotation

*** End of quotation                                          :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:

** =quote= environment

- Use =quote= or =quotation= to typeset quoted text.
- =quote= hasn't paragraph indentation.

*** quote                                                             :B_quote:
    :PROPERTIES:
    :BEAMER_env: quote
    :END:

Contents of quote

*** End of quote                                              :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:

** =quote= environment

- Use =quote= or =quotation= to typeset quoted text.
- =quote= hasn't paragraph indentation.
- Simpler solution:

#+begin_quote
Contents of quote
#+end_quote

** Verbatim

#+begin_src c
int main (void)
{
  std::vector<bool> is_prime (100, true);
  for (int i = 2; i < 100; i++)
    if (is_prime[i])
      {
        std::cout << i << " ";
        for (int j = i; j < 100;
             is_prime [j] = false, j+=i);
      }
  return 0;
}
#+end_src

** Extra environments

For simple environments, use:

#+attr_latex: :options {3}
#+begin_myenvironment
Test of a new
environment
#+end_myenvironment

I think we should changes some environment placeholders:

  + Introduce %r which would stand for the raw headline (without any
    processing)
  + %H and %U would use the raw headline text instead.

The previous definition would become:

  '("textpos1" "w" "\\begin{textblock}%r \\visible %a {" "} \\end{textblock}")

WDYT?

- Environment options may be given using the BEAMER_opt property. They will
  be enclosed in square brackets and inserted where %o appears in the
  environment definition.
  (with an example, but I can't think of one now)

- Additional arguments may be written into the environment's headline, and
  inserted into the LaTeX string using %r (raw headline text, no processing).

* Overlay/action specification (=BEAMER_act=)

** Overlay/action specification (=act=)

- Headlines support =BEAMER_ACT= properties.

- It is translated as an overlay/action specification, or a default overlay
  specification when enclosed within square brackets.

Dynamic list are possible on a case by case basis :

#+begin_src org
- @@beamer:<1->@@ Item
- @@beamer:<2->@@ Item
#+end_src

and as a frame property:

#+begin_src org
,* Headline
  :PROPERTIES:
  :BEAMER_ACT: [+-]
  :END:

  - Item
  - Item
#+end_src

* Options for the current frame (=BEAMER_opt=)

** Options for the current frame (=opt=)

- Headlines support =BEAMER_OPT= properties.

I'd still like to see something more like a "for-dummies" explanation of
passing options and arguments to LaTeX entities. I'm not saying the
documentation is woefully inadequate (hardly that -- Suvayu's page got me
rather far, and I got stuck on a couple of details). My experience was: it
never would have occurred to me on my own to use the headline text for
LaTeX code, and if there was a hint anywhere in the docs to suggest that
this would be the way to go, I didn't find it. That's a conceptual leap
that passed me by.

- This is for frames, and for environments within a frame

- It specifies options for the current frame or block, and will automatically
  be enclosed within square brackets.

- =fragile= option is added automatically

- You might want to put =allowframebreaks=0.9= there

* Power

Skip proof

[[Proof details]]

* Summary

** Summary

** For further reading

# Mettre ox-beamer, beamer.pdf

\beamertemplatebookbibitems

\begin{thebibliography}{10}

\bibitem{sal:b:formal-languages}
  A.~Salomaa.
  \newblock {\em Formal Languages}.
  \newblock Academic Press, 1973.
  \pause

\beamertemplatearticlebibitems
\bibitem{dij:j:smoothsort}
  E.~Dijkstra.
  \newblock Smoothsort, an alternative for sorting in situ.
  \newblock {\em Science of Computer Programming}, 1(3):223--233,
  1982.
  \pause

\bibitem{FeldmanO1973}
  E.~Feldman and J.~Owings, Jr.
  \newblock A class of universal linear bounded automata.
  \newblock {\em Information Sciences}, 6:187--190, 1973.
  \pause

\bibitem{JancarMPV1995}
  P.~Jan{\v c}ar, F.~Mr{\'a}z, M.~Pl{\'a}tek, and J.~Vogel.
  \newblock Restarting automata.
  \newblock {\em FCT Conference 1995}, LNCS 985, pages
  282--292. 1995.
\end{thebibliography}

* Appendix NAME XXX                                                :B_appendix:
  :PROPERTIES:
  :BEAMER_env: appendix
  :END:

** Proof details

Text omitted in main talk.

** More details

Even more additional material.

** Abbreviations
